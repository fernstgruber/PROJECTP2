data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data)
predictors
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modelcols
modeldata <- modeldataoktober[c(modelcols)]
modelcols %in% names(modeldataoktober)
modeldata <- modeldataoktober[c(predictors)]
modelcols %in% names(modeldataoktober)
predictors
names(modeldataoktober)
predictors <- c("SGU_gl","fischerk_ws5_hr")
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldata <- modeldataoktober[c(predictors)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
names(modeldata)
summary(modeldaa)
summary(modeldata)
modeldata <- modeldataoktober[c(predictors)]
modeldata[modeldata$SGU_kartiert == "TG","tillornot"] <- 1
modeldata[modeldata$SGU_kartiert != "TG","tillornot"] <- 0
modeldata$tillornot <- as.factor(modeldata$tillornot)
dependent="tillornot"
names(data)
data$SGU_gk <- factor(data$SGU_gk,levels=1:15)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
data$SGU_gk <- as.factor(data$SGU_gk)
f <- paste(dependent,"~.")
f
summary(modeldata)
summary(data)
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldata <- modeldataoktober[c(modelcols)]
summary(modeldata)
data$SGU_gk <- as.factor(data$SGU_gk)
f <- paste(dependent,"~.")
f
fit <- do.call("randomForest",list(as.formula(f),modeldata))
data[["preds"]] <- predict(fit,newdata=data)
data$SGU_gk <- factor(data$SGU_gk,levels=levels(legend$))
data$SGU_gk <- factor(data$SGU_gk,levels=levels(legend$SGU))
str(data$SGU_  gk)
str(data$SGU_gk)
modeldata$SGU_gk <- factor(modeldata$SGU_gk,levels=levels(legend$SGU))
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),modeldata))
data[["preds"]] <- predict(fit,newdata=data)
SGU_modell <- SGU_gk
data <-data[order(data$UID,decreasing = F),]
names(data)
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldata <- modeldataoktober[c(modelcols)]
dependent="tillornot"
data$SGU_gk <- factor(data$SGU_gk,levels=levels(legend$SGU))
modeldata$SGU_gk <- factor(modeldata$SGU_gk,levels=levels(legend$SGU))
f <- paste(dependent,"~.")
summary(data)
fit <- do.call("randomForest",list(as.formula(f),modeldata))
data[["preds"]] <- predict(fit,newdata=data)
summary(data)
names(legend) <- c("SGU","SGUcode")
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
names(modeldataoktober)
str(modeldataoktober$SGU_gk)
legend
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
summary(modeldataoktober$SGU_gk)
summary(modeldataoktober$SGUcode)
modelcols
modelcols %in% names(modeldataoktober)
modeldata <- modeldataoktober[c(modelcols)]
summary(modeldata)
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGUcode","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
summary(modeldata)
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),modeldata))
data[["preds"]] <- predict(fit,newdata=data)
summary(data)
SGU_modell <- SGU_gk
data <-data[order(data$UID,decreasing = F),]
head(data)
SGU_modell@data <- data
summary(SGU_modell)
outname=paste("till_",predictors,collapse="_")
writeRAST(SGU_modell["preds"],vname = outname)
summmary(data)
summary(data)
data$till <- as.numeric(data$preds)
summary(data)
str(data)
summary(data$preds)
levels(data$preds)
data <-data[order(data$UID,decreasing = F),]
SGU_modell@data <- data
outname=paste("till_",predictors,collapse="_")
writeRAST(SGU_modell["till"],vname = outname)
outname=paste("till_",predictors,collapse="_",sep="")
writeRAST(SGU_modell["till"],vname = outname)
execGRASS("r.to.vect",input=outname,output=outname,type="area")
execGRASS("v.out.ogr",input=outname,output=paste(outname,".shp",sep=""))
getwd()
source('~/PROJECTP2/scripts_2017/tryingtopredictmoraine.R', echo=TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/Data/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
eval(parse(text = myfunctions))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
evaluateforwardCV_anyerror(mypath = paste("/home/fabs/PROJECTP2/temporlarge/RanFor_1on1_5foldgeomorph_localterrainp5/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 5,error = "cverror",geheim="geheimerprederror")
cl1="AD"
cl2="TG"
evaluateforwardCV_anyerror(mypath = paste("/home/fabs/PROJECTP2/temporlarge/RanFor_1on1_5foldgeomorph_localterrainp5/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 5,error = "cverror",geheim="geheimerprederror")
evaluateforwardCV_anyerror(mypath = paste("/home/fabs/PROJECTP2/temporlarge/RanFor_1on1_5foldgeomorph_localterrainp5/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 5,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
interestingparameters <- c("maxic_ws11_10m", "Convexity_50m","slope_DTM_50m_avg_ws11_50m")
interestingparameters %in% names(modeldataoktober)
df <- modeldataoktober[modeldataoktober$SGU_kartiert %in% c(cl1,cl2),]
boxplot(as.character(i) ~ SGU_kartiert,data=df)
i=interestingparameters[1]
boxplot(as.character(i) ~ SGU_kartiert,data=df)
boxplot(data=df,as.formula(as.character(i) ~ SGU_kartiert))
?boxplot
names(df)
df$SGU_kartiert <- droplevels(df$SGU_kartiert)
i
boxplot(data=df,maxic_ws11_10m ~ SGU_kartiert)
proj2path="/home/fabs/Data/PROJECTP2/"
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws_57")
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws_57")
proj2path="/home/fabs/Data/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
rastlist <- execGRASS("g.list",type="rast",pattern="*")
rastlist <- attributes(rastlist)$resOut
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/PROJECTP2/"
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="SGU_kartiert"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
rastlist <- execGRASS("g.list",type="rast",pattern="*")
rastlist <- attributes(rastlist)$resOut
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="SGU_kartiert"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
#initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
#rastlist <- execGRASS("g.list",type="rast",pattern="*")
#rastlist <- attributes(rastlist)$resOut
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="SGU_kartiert"
modelcols <- c(dependent,predictors)
#SGU_gk <-readRAST("SGU")
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=5))
fit$
#data[["preds"]] <- predict(fit,newdata=data)
#SGU_modell <- SGU_gk
#names(legend) <- c("SGU","SGU_predcodes")
data <- merge(data,legend,by.x="preds",by.y="SGU",all.x=T)
fit$confusion
predictors
fit$err.rate
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=5))
fit$confusion
fit <- do.call("randomForest",list(as.formula(f),modeldata))
fit$confusion
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
OOBerror = fit$err.rate[nrow(fit$err.rate),1]
fit$err.rate[nrow(fit$err.rate),1]
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=5))
fit$confusion
fit$err.rate[nrow(fit$err.rate),1]
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=10))
fit$confusion
fit$err.rate[nrow(fit$err.rate),1]
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
dependent="SGU_kartiert"
####################################################################################################################
###################
#
#
#
#
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="SGU_kartiert"
modelcols <- c(dependent,predictors)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=5))
fit$confusion
fit$err.rate[nrow(fit$err.rate),1]
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=10))
fit$confusion
fit$err.rate[nrow(fit$err.rate),1]
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
require(e1071)
source('~/PROJECTP2/scripts_2017/analysisoffinalparentmaterialprediction.R', echo=TRUE)
proj2path="/home/fabs/PROJECTP2/"
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="SGU_kartiert"
modelcols <- c(dependent,predictors)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
source('~/PROJECTP2/scripts_2017/analysisoffinalparentmaterialprediction.R', echo=TRUE)
?randomForest
source('~/PROJECTP2/scripts_2017/analysisoffinalparentmaterialprediction.R', echo=TRUE)
source('~/PROJECTP2/scripts_2017/analysisoffinalparentmaterialprediction.R', echo=TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
View(roughimp)
View(allimp)
