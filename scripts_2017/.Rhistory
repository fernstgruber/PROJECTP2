nadata <- na.omit(profiledata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
profiledata <- profiledata[profiledata$ID != "12884", ]
badones <-vector()
for(pp in allpreds){
if(nrow(profiledata[is.na(profiledata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
origmodeldata <- profiledata[names(profiledata) %in% c(dependent,"SGU_gk",allpreds)]
#########################################################################################
psets <- c(1:5)
classes <-  levels(origmodeldata[[dependent]])
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/profiledata.RData")
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="SGU_kartiert"
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(profiledata)])
nadata <- na.omit(profiledata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
profiledata <- profiledata[profiledata$ID != "12884", ]
badones <-vector()
for(pp in allpreds){
if(nrow(profiledata[is.na(profiledata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
origmodeldata <- profiledata[names(profiledata) %in% c(dependent,"SGU_gk",allpreds)]
psets <- c(1:5)
classes <-  levels(origmodeldata[[dependent]])
classes
table(origmodeldata$SGU_kartiert)
classes <- classes(!(classes %in% c("MrD")))
classes <- classes[!(classes %in% c("MrD"))]
classes
paramsetnames = paramsetnames[psets]
paramsets = paramsets[psets]
n=1
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/profiledata.RData")
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="SGU_kartiert"
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(profiledata)])
nadata <- na.omit(profiledata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
profiledata <- profiledata[profiledata$ID != "12884", ]
badones <-vector()
for(pp in allpreds){
if(nrow(profiledata[is.na(profiledata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
origmodeldata <- profiledata[names(profiledata) %in% c(dependent,"SGU_gk",allpreds)]
#########################################################################################
psets <- c(1:5)
classes <-  levels(origmodeldata[[dependent]])
classes <- classes[!(classes %in% c("MrD"))]
#save(classes,paramsets,modeldata,paramsetnames,file="classesandparamsets.RData")
paramsetnames = paramsetnames[psets]
paramsets = paramsets[psets]
n=1
p=paramsets[1]
predset_name <- paramsetnames[n]
preds <- unlist(p)
predset=preds
mymodeldata <- na.omit(origmodeldata[c(dependent,predset)])
preds
predset
predset %in% names(origmodeldata)
predset %in% allpreds
allpreds %in% names(origmodeldata)
localterrain %in% allpreds
localterrain <- localterrain[localterrain %in% allpreds]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/profiledata.RData")
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="SGU_kartiert"
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(profiledata)])
nadata <- na.omit(profiledata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
profiledata <- profiledata[profiledata$ID != "12884", ]
badones <-vector()
for(pp in allpreds){
if(nrow(profiledata[is.na(profiledata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
localterrain <- localterrain[localterrain %in% allpreds]
paramsets[[1]] <- localterrain
origmodeldata <- profiledata[names(profiledata) %in% c(dependent,"SGU_gk",allpreds)]
psets <- c(1:5)
classes <-  levels(origmodeldata[[dependent]])
classes <- classes[!(classes %in% c("MrD"))]
paramsetnames = paramsetnames[psets]
paramsets = paramsets[psets]
n=1
p=paramsets[1]
predset_name <- paramsetnames[n]
preds <- unlist(p)
predset=preds
mymodeldata <- na.omit(origmodeldata[c(dependent,predset)])
folds = sample(rep(1:5, length = nrow(mymodeldata)))
predset=preds
tt=1:5 #number of best parameters in combination
result_df
load("/home/fabs/RanFor_1on1_5foldgeomorph_localterrainp5/CD_vs_TG/k3_round_1.RData")
View(result_df)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/profiledata.RData")
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="SGU_kartiert"
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(profiledata)])
nadata <- na.omit(profiledata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
profiledata <- profiledata[profiledata$ID != "12884", ]
badones <-vector()
for(pp in allpreds){
if(nrow(profiledata[is.na(profiledata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
localterrain <- localterrain[localterrain %in% allpreds]
paramsets[[1]] <- localterrain
origmodeldata <- profiledata[names(profiledata) %in% c(dependent,"SGU_gk",allpreds)]
#########################################################################################
evaluateforwardCV_anyerror(mypath = "/home/fabs/PROJECTP2/temporlarge/svm_fw_5fold_5p_SGU_kartiert_allpreds/",kk = 1:5,endround = 5,geheim = "geheimerprederror",error = "cverror")
evaluateforwardCV_anyerror(mypath = "/home/fabs/PROJECTP2/temporlarge/svm_fw_5fold_5p_SGU_kartiert_localterrain/",kk = 1:5,endround = 5,geheim = "geheimerprederror",error = "cverror")
evaluateforwardCV_anyerror(mypath = "/home/fabs/PROJECTP2/temporlarge/svm_fw_5fold_5p_SGU_kartiert_regionalterrain/",kk = 1:5,endround = 5,geheim = "geheimerprederror",error = "cverror")
evaluateforwardCV_anyerror(mypath = "/home/fabs/PROJECTP2/temporlarge/svm_fw_5fold_5p_SGU_kartiert_roughness/",kk = 1:5,endround = 5,geheim = "geheimerprederror",error = "cverror")
View(predict_ranfor_full)
View(predict_radial_full)
predict_radial_full(modeldata=origmodeldata,dependent = "SGU_kartiert",predictors = c("LS_Factor_50m","maxic_DTM_50m_avg_ws9_50m"))
predict_radial_full(modeldata=origmodeldata,dependent = "SGU_kartiert",predictors = c("SGU_gk","LS_Factor_50m","maxic_DTM_50m_avg_ws9_50m"))
predict_radial_full(modeldata=origmodeldata,dependent = "SGU_kartiert",predictors = c("SGU_gk","TRI_hr_ws31","geom_hr_L50m_fl10_rplipmps_UE_hr_40cells_hr"))
predict_radial_full(modeldata=origmodeldata,dependent = "SGU_kartiert",predictors = c("SGU_gk","TRI_hr_ws31","	terraintexture_hr_ws41_t1"))
predict_radial_full(modeldata=origmodeldata,dependent = "SGU_kartiert",predictors = c("SGU_gk","TRI_hr_ws31","terraintexture_hr_ws41_t1"))
table(origmodeldata$SGU_kartiert)
table(origmodeldata$SGU_gk)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="SGU_kartiert"
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(profiledata)])
nadata <- na.omit(profiledata)
names(sampledata)
dependent="geolegen_1"
table(sampledata$geolegen_1)
badones <-vector()
for(pp in localterrain){
if(nrow(sampledata[is.na(sampledata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
badones
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(sampledata)])
nadata <- na.omit(profiledata)
nadata <- na.omit(sampledata)
sampledata <- na.omit(sampledata)
badones <-vector()
for(pp in localterrain){
if(nrow(sampledata[is.na(sampledata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
allpreds <- c(allpreds[allpreds %in% names(sampledata)])
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="geolegen_1"
sampledata <- na.omit(sampledata)
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
psets <- c(1:5)
classes <-  levels(origmodeldata[[dependent]])
classes
classes <-  levels(sampledata[[dependent]])
classes <- classes[!(classes %in% c("MrD"))]
classes <-  levels(sampledata[[dependent]])
classes
classes <-  levels(origmodeldata[[dependent]])
names(origmodeldata)
origmodeldata$geolegen_1
origmodeldata[[dependent]] <- as.factor(origmodeldata[[dependent]])
classes <-  levels(origmodeldata[[dependent]])
classes
classes <- classes[!(classes %in% c("Ant","WB"))]
paramsetnames = paramsetnames[psets]
paramsets = paramsets[psets]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/profiledata.RData")
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="SGU_kartiert"
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(profiledata)])
nadata <- na.omit(profiledata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
profiledata <- profiledata[profiledata$ID != "12884", ]
badones <-vector()
for(pp in allpreds){
if(nrow(profiledata[is.na(profiledata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
localterrain <- localterrain[localterrain %in% allpreds]
paramsets[[1]] <- localterrain
roughness <- roughness[roughness %in% allpreds]
roughness[495]
allpreds[495]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="geolegen_1"
sampledata <- na.omit(sampledata)
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
origmodeldata[[dependent]] <- as.factor(origmodeldata[[dependent]])
#########################################################################################
psets <- c(5,1,3)
classes <-  levels(origmodeldata[[dependent]])
classes <- classes[!(classes %in% c("Ant","WB"))]
origclasses <- classes
analysisclasses <- c("AD","SB")
paramsetnames = paramsetnames[psets]
paramsets = paramsets[psets]
n=1
summary(sampledata[[allpreds[495]]])
p=allpreds[1]
summary(origmodeldata[[p]])[5]
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0 ) {
badones <- c(badones,p)
}
}
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
badones
roughness
roughness[!(roughness %in% badones)]
badones
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
roughness <- roughness[roughness %in% c("terraintexture_hr_ws9_t1")]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="geolegen_1"
sampledata <- na.omit(sampledata)
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
origmodeldata[[dependent]] <- as.factor(origmodeldata[[dependent]])
badones <- vector()
p=allpreds[1]
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
roughness <- roughness[!(roughness %in% badones)]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
roughness <- roughness[roughness %in% c("terraintexture_hr_ws9_t1")]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="geolegen_1"
sampledata <- na.omit(sampledata)
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
origmodeldata[[dependent]] <- as.factor(origmodeldata[[dependent]])
badones <- vector()
p=allpreds[1]
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
roughness[!(roughness %in% badones)]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
roughness <- roughness[roughness %in% c("terraintexture_hr_ws9_t1")]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="geolegen_1"
sampledata <- na.omit(sampledata)
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
origmodeldata[[dependent]] <- as.factor(origmodeldata[[dependent]])
badones <- vector()
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
roughness
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="geolegen_1"
sampledata <- na.omit(sampledata)
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
origmodeldata[[dependent]] <- as.factor(origmodeldata[[dependent]])
badones <- vector()
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
baones
badones
roughness
library(RCurl)
library(rgrass7)
library(repmis)
require(xtable)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
geogenesecode <-  read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/geogenesecode_2017.csv"),header=T, sep="\t")
substratgenesecode <-  read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/substratgenesecode_ohneleerzeichn_2017.csv"),header=T, sep=",")
boden <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/Gebiet1_bodenprofile_ohnedoppelte_2017.csv"),header=T, sep="\t")
profilpunkte <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/Profilpunkte_p2.csv"),header=T, sep=",")
geolegendeng <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/geolegendeng.txt"),sep="\t",header=T)
thalheimer <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/ueberetsch_profile_thalheimer_2017.csv"),sep="\t",header=T)
thalheimer_AGM <- thalheimer[c("Nr","AGM_thal","geomorphologie_kart_thalheimer")]
wlm_AGM <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/wlm_AGM_2107.csv"),sep="\t",header=T)
rebo_AGM_geomorph <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/rebo_AGM_geomorphologie.csv"),sep="\t",header=T)
rebo_AGM <- rebo_AGM_geomorph[,1:2]
names(rebo_AGM) <- c("ID","geomorphologie_kart_rebo")
forstdb_AGM <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/forstdb_AGM.csv"),sep="\t",header=T)
geolegende <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/wiedergeotest.csv"),sep=";",header=T,stringsAsFactors = F)
boden <- merge(x=boden,y=geolegende,by.x="gebiet1_parentmaterial_numerogis",by.y="NUMEROGIS",all.x=T)
boden$Beschreibung <- as.factor(boden$Beschreibung)
boden <-droplevels(boden)
bbundhoehe <-  read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/chemiereferenzpunkte_bbundhoehenstufe_2017.txt"),sep=",",header=T)
bbundhoehe <- bbundhoehe[c("ID","bodenbedeckung","hoehenstufen")]
boden<- merge(boden,bbundhoehe,by="ID",all.x=T )
summary(boden)
#################################################################################################################
boden <- merge(boden,forstdb_AGM,by.x="ID",by.y="AufID",all.x=T)
boden <- merge(boden,wlm_AGM,by.x="ID",by.y="IDENT",all.x=T)
boden <- merge(boden,rebo_AGM,by="ID",all.x=T)
boden <- merge(boden,thalheimer_AGM,by.x="ID",by.y="Nr",all.x=T)
kartiert_wlm <- !(is.na(boden$geomorphologie_kart_wlm))
boden[kartiert_wlm,"geomorphologie_kartiert"] <- as.character(boden$geomorphologie_kart_wlm[kartiert_wlm])
kartiert_forst <- !(is.na(boden$geomorphologie_kart_forstdb))
boden[kartiert_forst,"geomorphologie_kartiert"] <- as.character(boden$geomorphologie_kart_forst[kartiert_forst])
kartiert_rebo <- !(is.na(boden$geomorphologie_kart_rebo))
boden[kartiert_rebo,"geomorphologie_kartiert"] <- as.character(boden$geomorphologie_kart_rebo[kartiert_rebo])
kartiert_thal <- !(is.na(boden$geomorphologie_kart_thalheimer))
boden[kartiert_thal,"geomorphologie_kartiert"] <- as.character(boden$geomorphologie_kart_thalheimer[kartiert_thal])
boden$geomorphologie_kartiert <- as.factor(boden$geomorphologie_kartiert)
levels(boden$geomorphologie_kartiert)
levels(boden$geomorphologie_beschreibung)
levels(boden$geomorphologie_kartiert) %in% levels(boden$geomorphologie_beschreibung)
summary(boden$geomorphologie_kartiert)
summary(boden$geomorphologie_beschreibung)
geomorphologieundboden <- boden[c("ID","geomorphologie_kartiert","geomorphologie_beschreibung")]
#legende_kartierer_gegen_karte <- read.table("legede_kartierer_gegen_karte.txt",sep="\t",header=T)
geomorphologieundboden <- merge(geomorphologieundboden,geolegendeng,by.x="geomorphologie_kartiert",by.y="geomorphologie_deutsch",all.x=T)
names(geomorphologieundboden) <- c("geomorphologie_kartiert","ID","geomorphologie_beschreibung","geounit_kart","geomorphologieklasse_kurz_kartiert","short.description_kart","code_kart")
geomorphologieundboden <- merge(geomorphologieundboden,geolegendeng,by.x="geomorphologie_beschreibung",by.y="geomorphologie_deutsch",all.x=T)
names(geomorphologieundboden) <- c("geomorphologie_beschreibung","geomorphologie_kartiert","ID","geounit_kart","geomorphologieklasse_kurz_kartiert","short.description_kart","code_kart","geounit_gk","geomorphologieklasse_kurz_gk","short.description_gk","code_gk")
summary(geomorphologieundboden$geomorphologieklasse_kurz_kartiert)
#geomorphologieundboden$geomorphologieklasse_kurz_kartiert <- droplevels(geomorphologieundboden$geomorphologieklasse_kurz_kartiert)
#levels(geomorphologieundboden$geomorphologieklasse_kurz_kartiert) <- c("AD","CBD","CD",  "CSR", "DC",  "GLD", "IMS", "ISR", "LD",  "LT",  "MrD", "MxD", "SB","SD","SSR","TG")
#geomorphologieundboden$geomorphologieklasse_kurz_gk <- droplevels(geomorphologieundboden$geomorphologieklasse_kurz_gk)
#levels(geomorphologieundboden$geomorphologieklasse_kurz_gk) <- c("AD","CBD","CD",  "CSR", "DC",  "GLD", "IMS", "ISR", "LD",  "LT",  "MrD", "MxD", "SB","SD","SSR","TG")
kartierergegenkarte<-  as.data.frame.matrix(table(geomorphologieundboden$geomorphologieklasse_kurz_gk,geomorphologieundboden$geomorphologieklasse_kurz_kartiert))
kartierergegenkarte <-kartierergegenkarte[-c(2,17),-c(2,17)]
xtable(kartierergegenkarte,caption = "Tabular comparison of parent material geounits as observed by soil surveyor (rows) and in the geologic map (columns).",label = "kartiergegenkarte",)
# hier dann vielleicht \tabcolsep=0.10cm unter \centering einfügen
####
CM <- kartierergegenkarte
print(summary.kappa(kappa(CM)))
mean(geomorphologieundboden$geomorphologieklasse_kurz_kartiert==geomorphologieundboden$geomorphologieklasse_kurz_gk,na.rm=T)
###############################################################################################################################
CM
sum(CM)
3+2+12+2+2+1+1+24+15+1+88
1+1+1+3+1+5+9+88
151/380
151/380
109/380
88/109
save(CM, file="/home/fabs/PROJECTP2/data2017/confusionmatrixsoilprofiles.RData")
load(file="/home/fabs/PROJECTP2/data2017/confusionmatrixsoilprofiles.RData")
151-88
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/data2017/modeldata_sGUkartiert.RData")
load("/home/fabs/PROJECTP2/data2017/modeldata_sGUkartiert.RData")
evaluateforwardCV_anyerror(mypath="/home/fabs/PROJECTP2/data2017/temprdata/ranfor_fw_5fold_6p_SGU_kartiert_roughness/",kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData")
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
eval(parse(text = myfunctions))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
evaluateforwardCV_anyerror(mypath="//home/fabs/PROJECTP2/data2017/temprdata/ranfor_SBintern_SGU_kartiert_allpreds/",kk=1:3,endround = 5,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath="/home/fabs/PROJECTP2/data2017/temprdata/ranfor_SBintern_SGU_kartiert_allpreds/",kk=1:3,endround = 5,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_SBintern_SGU_kartiert_allpreds/",kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_SBintern_SGU_kartiert_allpreds/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_SBintern_SGU_kartiert_roughness/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_SBintern_SGU_kartiert_roughness/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_till_allpreds/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_tillornot_allpreds/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
View(importance_ranfor_pset)
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_tillornot_roughness/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_till_roughness/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
