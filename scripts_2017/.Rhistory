mapset="paper3data_predictparentmaterial"
#########################################################################
#initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
#rastlist <- execGRASS("g.list",type="rast",pattern="*")
#rastlist <- attributes(rastlist)$resOut
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="SGU_kartiert"
modelcols <- c(dependent,predictors)
#SGU_gk <-readRAST("SGU")
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=5))
fit$
#data[["preds"]] <- predict(fit,newdata=data)
#SGU_modell <- SGU_gk
#names(legend) <- c("SGU","SGU_predcodes")
data <- merge(data,legend,by.x="preds",by.y="SGU",all.x=T)
fit$confusion
predictors
fit$err.rate
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=5))
fit$confusion
fit <- do.call("randomForest",list(as.formula(f),modeldata))
fit$confusion
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
OOBerror = fit$err.rate[nrow(fit$err.rate),1]
fit$err.rate[nrow(fit$err.rate),1]
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=5))
fit$confusion
fit$err.rate[nrow(fit$err.rate),1]
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=10))
fit$confusion
fit$err.rate[nrow(fit$err.rate),1]
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
dependent="SGU_kartiert"
####################################################################################################################
###################
#
#
#
#
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="SGU_kartiert"
modelcols <- c(dependent,predictors)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=5))
fit$confusion
fit$err.rate[nrow(fit$err.rate),1]
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=10))
fit$confusion
fit$err.rate[nrow(fit$err.rate),1]
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
table(modeldata$preds,modeldata$SGU_kartiert)
require(e1071)
source('~/PROJECTP2/scripts_2017/analysisoffinalparentmaterialprediction.R', echo=TRUE)
proj2path="/home/fabs/PROJECTP2/"
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="SGU_kartiert"
modelcols <- c(dependent,predictors)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
source('~/PROJECTP2/scripts_2017/analysisoffinalparentmaterialprediction.R', echo=TRUE)
?randomForest
source('~/PROJECTP2/scripts_2017/analysisoffinalparentmaterialprediction.R', echo=TRUE)
source('~/PROJECTP2/scripts_2017/analysisoffinalparentmaterialprediction.R', echo=TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
View(roughimp)
View(allimp)
cl1="TG"
ylim=c(0,100)
cl1= "TG"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
library(knitr)
#proj2path="/home/fabs/PROJECTP2/"
#paper2datapath ="/home/fabs/Data/paper2data/"
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
cl1= "TG"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
cl1= "TG"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
ylim=c(0,100)
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter))
parameter = "TRI_hr_ws48"
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_internal_TRI48.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
classes <- c("TG","SB","SD")
classdata <- modeldataoktober[modeldataoktober$SGU_kartiert %in% classes,parameter]
dependent="SGU_kartiert"
classes <- c("TG","SB","SD")
classdata <- modeldataoktober[modeldataoktober$SGU_kartiert %in% classes,c(dependent,parameter)]
classdata <- droplevels(classdata)
summary(classdata)
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
boxplot(data=classdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_kartiert_TRI48.svg",sep=""))
boxplot(data=classdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
load("/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/temporlarge/datawithpreds_largepredictorset.RData")
rm(datawithpreds)
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/media/fabs/Volume/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
##############################################
north <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_TRI_100m_grid_SGU_north")
south <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_TRI_100m_grid_south")
south <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_TRI_100m_grid_SGU_south")
mapdata <- rbind(north,south)
rm(north,south)
names(mapdata)
summary(mapdata)
mapdata$SGU <- as.factor(mapdata$geolegen_1)
mapclassdata <- mapdata[mapdata$SGU %in% classes,c(dependent,parameter)]
dependent="SGU"
mapclassdata <- mapdata[mapdata$SGU %in% classes,c(dependent,parameter)]
boxplot(data=classdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
mapclassdata <-droplevels(mapclassdata)
boxplot(data=classdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
parameter
parameter %in% names(mapclassdata)
dependent %in% names(mapclassdata)
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_geol_TRI48.svg",sep=""))
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SB"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SB_internal_TRI48.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SD_internal_TRI48.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
dependent="correct"
cl1="TG"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
sumary(relevantmodeldata)
summary(relevantmodeldata)
summary(relevantmodeldata$correct)
cl1="SB"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
cl1="SD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
parameter = "vectorruggedness_hr_ws43"
cl1="TG"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
ylim=c(0,1)
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
ylim=c(0,0.2)
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dependent="SGU"
north <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_TRI_100m_grid_SGU_north")
south <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_TRI_100m_grid_SGU_south")
mapdata <- rbind(north,south)
rm(north,south)
names(mapdata)
mapdata$SGU <- as.factor(mapdata$geolegen_1)
mapclassdata <- mapdata[mapdata$SGU %in% classes,c(dependent,parameter)]
dependent="SGU"
north <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_vectorruggedness_100m_grid_SGU_north")
south <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_vectorruggedness_100m_grid_SGU_south")
mapdata <- rbind(north,south)
rm(north,south)
names(mapdata)
summary(mapdata)
mapdata$SGU <- as.factor(mapdata$geolegen_1)
mapclassdata <- mapdata[mapdata$SGU %in% classes,c(dependent,parameter)]
mapclassdata <-droplevels(mapclassdata)
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_geol_VR43.svg",sep=""))
####################################################
######
parameter = "vectorruggedness_hr_ws43"
ylim=c(0,0.22)
cl1="TG"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_internal_VR43.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SB"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SB_internal_VR43.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SD_internal_VR43.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
dependent="SGU_kartiert"
classes <- c("TG","SB","SD")
classdata <- modeldataoktober[modeldataoktober$SGU_kartiert %in% classes,c(dependent,parameter)]
classdata <- droplevels(classdata)
summary(classdata)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_kartiert_VR43.svg",sep=""))
boxplot(data=classdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
dependent="SGU"
north <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_vectorruggedness_100m_grid_SGU_north")
south <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_vectorruggedness_100m_grid_SGU_south")
mapdata <- rbind(north,south)
rm(north,south)
names(mapdata)
summary(mapdata)
mapdata$SGU <- as.factor(mapdata$geolegen_1)
mapclassdata <- mapdata[mapdata$SGU %in% classes,c(dependent,parameter)]
mapclassdata <-droplevels(mapclassdata)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_geol_VR43.svg",sep=""))
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
####################################################
######
parameter = "vectorruggedness_hr_ws57"
ylim=c(0,0.2)
cl1="TG"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_internal_VR57.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SB"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SB_internal_VR57.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SD_internal_VR57.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
dependent="SGU_kartiert"
classes <- c("TG","SB","SD")
classdata <- modeldataoktober[modeldataoktober$SGU_kartiert %in% classes,c(dependent,parameter)]
classdata <- droplevels(classdata)
summary(classdata)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_kartiert_VR57.svg",sep=""))
boxplot(data=classdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
dependent="SGU"
north <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_vectorruggedness_100m_grid_SGU_north")
south <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_vectorruggedness_100m_grid_SGU_south")
mapdata <- rbind(north,south)
rm(north,south)
names(mapdata)
summary(mapdata)
mapdata$SGU <- as.factor(mapdata$geolegen_1)
mapclassdata <- mapdata[mapdata$SGU %in% classes,c(dependent,parameter)]
mapclassdata <-droplevels(mapclassdata)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_geol_VR57.svg",sep=""))
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
######
parameter = "TRI_hr_ws31"
ylim=c(0,0.2)
cl1="TG"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_internal_VR57.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SB"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SB_internal_VR57.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SD_internal_VR57.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
dependent="SGU_kartiert"
classes <- c("TG","SB","SD")
classdata <- modeldataoktober[modeldataoktober$SGU_kartiert %in% classes,c(dependent,parameter)]
classdata <- droplevels(classdata)
summary(classdata)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_kartiert_VR57.svg",sep=""))
boxplot(data=classdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
dependent="SGU"
north <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_vectorruggedness_100m_grid_SGU_north")
south <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_vectorruggedness_100m_grid_SGU_south")
mapdata <- rbind(north,south)
rm(north,south)
names(mapdata)
summary(mapdata)
mapdata$SGU <- as.factor(mapdata$geolegen_1)
mapclassdata <- mapdata[mapdata$SGU %in% classes,c(dependent,parameter)]
mapclassdata <-droplevels(mapclassdata)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_geol_VR57.svg",sep=""))
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
####################################################
######
parameter = "TRI_hr_ws31"
ylim=c(0,0.2)
cl1="TG"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_internal_VR57.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SB"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SB_internal_VR57.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
cl1="SD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_SD_internal_VR57.svg",sep=""))
boxplot(data=relevantmodeldata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
dependent="SGU_kartiert"
classes <- c("TG","SB","SD")
classdata <- modeldataoktober[modeldataoktober$SGU_kartiert %in% classes,c(dependent,parameter)]
classdata <- droplevels(classdata)
summary(classdata)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_kartiert_VR57.svg",sep=""))
boxplot(data=classdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
dependent="SGU"
north <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_TRI_100m_grid_SGU_north")
south <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_TRI_100m_grid_SGU_south")
mapdata <- rbind(north,south)
rm(north,south)
names(mapdata)
summary(mapdata)
mapdata$SGU <- as.factor(mapdata$geolegen_1)
mapclassdata <- mapdata[mapdata$SGU %in% classes,c(dependent,parameter)]
mapclassdata <-droplevels(mapclassdata)
svg(paste(proj2path,"/figure/studyarea_statistics/boxplot_TG_SB_SD_geol_VR57.svg",sep=""))
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
dev.off()
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
parameter = "TRI_hr_ws31"
ylim=c(0,300)
dependent="SGU"
north <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_TRI_100m_grid_SGU_north")
south <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "p2_samplevectors",vector = "dtm_hr_TRI_100m_grid_SGU_south")
mapdata <- rbind(north,south)
rm(north,south)
names(mapdata)
summary(mapdata)
mapdata$SGU <- as.factor(mapdata$geolegen_1)
mapclassdata <- mapdata[mapdata$SGU %in% classes,c(dependent,parameter)]
mapclassdata <-droplevels(mapclassdata)
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
ylim=c(0,130)
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
ylim=c(0,120)
boxplot(data=mapclassdata[c(as.character(parameter),dependent)],as.formula(paste(as.character(parameter),"~ ", dependent,sep=" ")),outline=T,main=as.character(parameter),ylim=ylim)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
library(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
#proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
#paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5,ylim=c(0,200))
summary(boden_SGU$TYP)
sum(summary(boden_SGU$TYP))
2+1+52+44+14+14+167+8+1+13+1+7+8+45+1+1
