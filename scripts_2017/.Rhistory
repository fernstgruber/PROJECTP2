badones <- vector()
p=allpreds[1]
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
roughness <- roughness[!(roughness %in% badones)]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
roughness <- roughness[roughness %in% c("terraintexture_hr_ws9_t1")]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="geolegen_1"
sampledata <- na.omit(sampledata)
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
origmodeldata[[dependent]] <- as.factor(origmodeldata[[dependent]])
badones <- vector()
p=allpreds[1]
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
roughness[!(roughness %in% badones)]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
roughness <- roughness[roughness %in% c("terraintexture_hr_ws9_t1")]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="geolegen_1"
sampledata <- na.omit(sampledata)
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
origmodeldata[[dependent]] <- as.factor(origmodeldata[[dependent]])
badones <- vector()
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
roughness
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="geolegen_1"
sampledata <- na.omit(sampledata)
origmodeldata <- sampledata[names(sampledata) %in% c(dependent,allpreds)]
origmodeldata[[dependent]] <- as.factor(origmodeldata[[dependent]])
badones <- vector()
for (p in allpreds){
if (summary(origmodeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
baones
badones
roughness
library(RCurl)
library(rgrass7)
library(repmis)
require(xtable)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
geogenesecode <-  read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/geogenesecode_2017.csv"),header=T, sep="\t")
substratgenesecode <-  read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/substratgenesecode_ohneleerzeichn_2017.csv"),header=T, sep=",")
boden <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/Gebiet1_bodenprofile_ohnedoppelte_2017.csv"),header=T, sep="\t")
profilpunkte <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/Profilpunkte_p2.csv"),header=T, sep=",")
geolegendeng <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/geolegendeng.txt"),sep="\t",header=T)
thalheimer <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/ueberetsch_profile_thalheimer_2017.csv"),sep="\t",header=T)
thalheimer_AGM <- thalheimer[c("Nr","AGM_thal","geomorphologie_kart_thalheimer")]
wlm_AGM <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/wlm_AGM_2107.csv"),sep="\t",header=T)
rebo_AGM_geomorph <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/rebo_AGM_geomorphologie.csv"),sep="\t",header=T)
rebo_AGM <- rebo_AGM_geomorph[,1:2]
names(rebo_AGM) <- c("ID","geomorphologie_kart_rebo")
forstdb_AGM <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/forstdb_AGM.csv"),sep="\t",header=T)
geolegende <- read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/wiedergeotest.csv"),sep=";",header=T,stringsAsFactors = F)
boden <- merge(x=boden,y=geolegende,by.x="gebiet1_parentmaterial_numerogis",by.y="NUMEROGIS",all.x=T)
boden$Beschreibung <- as.factor(boden$Beschreibung)
boden <-droplevels(boden)
bbundhoehe <-  read.table(text=getURL("https://raw.githubusercontent.com/fernstgruber/p2/master/data2017/chemiereferenzpunkte_bbundhoehenstufe_2017.txt"),sep=",",header=T)
bbundhoehe <- bbundhoehe[c("ID","bodenbedeckung","hoehenstufen")]
boden<- merge(boden,bbundhoehe,by="ID",all.x=T )
summary(boden)
#################################################################################################################
boden <- merge(boden,forstdb_AGM,by.x="ID",by.y="AufID",all.x=T)
boden <- merge(boden,wlm_AGM,by.x="ID",by.y="IDENT",all.x=T)
boden <- merge(boden,rebo_AGM,by="ID",all.x=T)
boden <- merge(boden,thalheimer_AGM,by.x="ID",by.y="Nr",all.x=T)
kartiert_wlm <- !(is.na(boden$geomorphologie_kart_wlm))
boden[kartiert_wlm,"geomorphologie_kartiert"] <- as.character(boden$geomorphologie_kart_wlm[kartiert_wlm])
kartiert_forst <- !(is.na(boden$geomorphologie_kart_forstdb))
boden[kartiert_forst,"geomorphologie_kartiert"] <- as.character(boden$geomorphologie_kart_forst[kartiert_forst])
kartiert_rebo <- !(is.na(boden$geomorphologie_kart_rebo))
boden[kartiert_rebo,"geomorphologie_kartiert"] <- as.character(boden$geomorphologie_kart_rebo[kartiert_rebo])
kartiert_thal <- !(is.na(boden$geomorphologie_kart_thalheimer))
boden[kartiert_thal,"geomorphologie_kartiert"] <- as.character(boden$geomorphologie_kart_thalheimer[kartiert_thal])
boden$geomorphologie_kartiert <- as.factor(boden$geomorphologie_kartiert)
levels(boden$geomorphologie_kartiert)
levels(boden$geomorphologie_beschreibung)
levels(boden$geomorphologie_kartiert) %in% levels(boden$geomorphologie_beschreibung)
summary(boden$geomorphologie_kartiert)
summary(boden$geomorphologie_beschreibung)
geomorphologieundboden <- boden[c("ID","geomorphologie_kartiert","geomorphologie_beschreibung")]
#legende_kartierer_gegen_karte <- read.table("legede_kartierer_gegen_karte.txt",sep="\t",header=T)
geomorphologieundboden <- merge(geomorphologieundboden,geolegendeng,by.x="geomorphologie_kartiert",by.y="geomorphologie_deutsch",all.x=T)
names(geomorphologieundboden) <- c("geomorphologie_kartiert","ID","geomorphologie_beschreibung","geounit_kart","geomorphologieklasse_kurz_kartiert","short.description_kart","code_kart")
geomorphologieundboden <- merge(geomorphologieundboden,geolegendeng,by.x="geomorphologie_beschreibung",by.y="geomorphologie_deutsch",all.x=T)
names(geomorphologieundboden) <- c("geomorphologie_beschreibung","geomorphologie_kartiert","ID","geounit_kart","geomorphologieklasse_kurz_kartiert","short.description_kart","code_kart","geounit_gk","geomorphologieklasse_kurz_gk","short.description_gk","code_gk")
summary(geomorphologieundboden$geomorphologieklasse_kurz_kartiert)
#geomorphologieundboden$geomorphologieklasse_kurz_kartiert <- droplevels(geomorphologieundboden$geomorphologieklasse_kurz_kartiert)
#levels(geomorphologieundboden$geomorphologieklasse_kurz_kartiert) <- c("AD","CBD","CD",  "CSR", "DC",  "GLD", "IMS", "ISR", "LD",  "LT",  "MrD", "MxD", "SB","SD","SSR","TG")
#geomorphologieundboden$geomorphologieklasse_kurz_gk <- droplevels(geomorphologieundboden$geomorphologieklasse_kurz_gk)
#levels(geomorphologieundboden$geomorphologieklasse_kurz_gk) <- c("AD","CBD","CD",  "CSR", "DC",  "GLD", "IMS", "ISR", "LD",  "LT",  "MrD", "MxD", "SB","SD","SSR","TG")
kartierergegenkarte<-  as.data.frame.matrix(table(geomorphologieundboden$geomorphologieklasse_kurz_gk,geomorphologieundboden$geomorphologieklasse_kurz_kartiert))
kartierergegenkarte <-kartierergegenkarte[-c(2,17),-c(2,17)]
xtable(kartierergegenkarte,caption = "Tabular comparison of parent material geounits as observed by soil surveyor (rows) and in the geologic map (columns).",label = "kartiergegenkarte",)
# hier dann vielleicht \tabcolsep=0.10cm unter \centering einfÃ¼gen
####
CM <- kartierergegenkarte
print(summary.kappa(kappa(CM)))
mean(geomorphologieundboden$geomorphologieklasse_kurz_kartiert==geomorphologieundboden$geomorphologieklasse_kurz_gk,na.rm=T)
###############################################################################################################################
CM
sum(CM)
3+2+12+2+2+1+1+24+15+1+88
1+1+1+3+1+5+9+88
151/380
151/380
109/380
88/109
save(CM, file="/home/fabs/PROJECTP2/data2017/confusionmatrixsoilprofiles.RData")
load(file="/home/fabs/PROJECTP2/data2017/confusionmatrixsoilprofiles.RData")
151-88
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/data2017/modeldata_sGUkartiert.RData")
load("/home/fabs/PROJECTP2/data2017/modeldata_sGUkartiert.RData")
evaluateforwardCV_anyerror(mypath="/home/fabs/PROJECTP2/data2017/temprdata/ranfor_fw_5fold_6p_SGU_kartiert_roughness/",kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData")
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
eval(parse(text = myfunctions))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
evaluateforwardCV_anyerror(mypath="//home/fabs/PROJECTP2/data2017/temprdata/ranfor_SBintern_SGU_kartiert_allpreds/",kk=1:3,endround = 5,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath="/home/fabs/PROJECTP2/data2017/temprdata/ranfor_SBintern_SGU_kartiert_allpreds/",kk=1:3,endround = 5,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_SBintern_SGU_kartiert_allpreds/",kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_SBintern_SGU_kartiert_allpreds/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_SBintern_SGU_kartiert_roughness/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_SBintern_SGU_kartiert_roughness/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_till_allpreds/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_tillornot_allpreds/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
View(importance_ranfor_pset)
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_tillornot_roughness/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
evaluateforwardCV_anyerror(mypath=paste(proj2path,"data2017/temprdata/ranfor_till_roughness/",sep=""),kk=1:5,endround = 3,error = "cverror",geheim = "geheimerprederror",yrange=c(0,0.6))
rm(list=ls())
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGUcode","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data)
predictors
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modelcols
modeldata <- modeldataoktober[c(modelcols)]
modelcols %in% names(modeldataoktober)
modeldata <- modeldataoktober[c(predictors)]
modelcols %in% names(modeldataoktober)
predictors
names(modeldataoktober)
predictors <- c("SGU_gl","fischerk_ws5_hr")
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldata <- modeldataoktober[c(predictors)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
names(modeldata)
summary(modeldaa)
summary(modeldata)
modeldata <- modeldataoktober[c(predictors)]
modeldata[modeldata$SGU_kartiert == "TG","tillornot"] <- 1
modeldata[modeldata$SGU_kartiert != "TG","tillornot"] <- 0
modeldata$tillornot <- as.factor(modeldata$tillornot)
dependent="tillornot"
names(data)
data$SGU_gk <- factor(data$SGU_gk,levels=1:15)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
data$SGU_gk <- as.factor(data$SGU_gk)
f <- paste(dependent,"~.")
f
summary(modeldata)
summary(data)
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldata <- modeldataoktober[c(modelcols)]
summary(modeldata)
data$SGU_gk <- as.factor(data$SGU_gk)
f <- paste(dependent,"~.")
f
fit <- do.call("randomForest",list(as.formula(f),modeldata))
data[["preds"]] <- predict(fit,newdata=data)
data$SGU_gk <- factor(data$SGU_gk,levels=levels(legend$))
data$SGU_gk <- factor(data$SGU_gk,levels=levels(legend$SGU))
str(data$SGU_  gk)
str(data$SGU_gk)
modeldata$SGU_gk <- factor(modeldata$SGU_gk,levels=levels(legend$SGU))
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),modeldata))
data[["preds"]] <- predict(fit,newdata=data)
SGU_modell <- SGU_gk
data <-data[order(data$UID,decreasing = F),]
names(data)
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldata <- modeldataoktober[c(modelcols)]
dependent="tillornot"
data$SGU_gk <- factor(data$SGU_gk,levels=levels(legend$SGU))
modeldata$SGU_gk <- factor(modeldata$SGU_gk,levels=levels(legend$SGU))
f <- paste(dependent,"~.")
summary(data)
fit <- do.call("randomForest",list(as.formula(f),modeldata))
data[["preds"]] <- predict(fit,newdata=data)
summary(data)
names(legend) <- c("SGU","SGUcode")
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGU_gk","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
names(modeldataoktober)
str(modeldataoktober$SGU_gk)
legend
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
summary(modeldataoktober$SGU_gk)
summary(modeldataoktober$SGUcode)
modelcols
modelcols %in% names(modeldataoktober)
modeldata <- modeldataoktober[c(modelcols)]
summary(modeldata)
#ACHTUNG sind die SGU_predcodes eh Faktoren??
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
predictors <- c("SGUcode","fischerk_ws5_hr")
proj2path="/home/fabs/PROJECTP2/"
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"
gisDbase =  "/home/fabs/Data/GRASSDATA/"
location="EPPAN_vhr"
mapset="paper3data_predictparentmaterial"
#########################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober[modeldataoktober$SGU_kartiert == "TG","tillornot"] <- 1
modeldataoktober[modeldataoktober$SGU_kartiert != "TG","tillornot"] <- 0
modeldataoktober$tillornot <- as.factor(modeldataoktober$tillornot)
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="tillornot"
modelcols <- c(dependent,predictors)
SGU_gk <-readRAST("SGU")
data <- SGU_gk@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- predictors
data$UID <- 1:nrow(data)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
summary(modeldata)
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
data$SGUcode <- factor(data$SGUcode,levels=1:15)
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),modeldata))
data[["preds"]] <- predict(fit,newdata=data)
summary(data)
SGU_modell <- SGU_gk
data <-data[order(data$UID,decreasing = F),]
head(data)
SGU_modell@data <- data
summary(SGU_modell)
outname=paste("till_",predictors,collapse="_")
writeRAST(SGU_modell["preds"],vname = outname)
summmary(data)
summary(data)
data$till <- as.numeric(data$preds)
summary(data)
str(data)
summary(data$preds)
levels(data$preds)
data <-data[order(data$UID,decreasing = F),]
SGU_modell@data <- data
outname=paste("till_",predictors,collapse="_")
writeRAST(SGU_modell["till"],vname = outname)
outname=paste("till_",predictors,collapse="_",sep="")
writeRAST(SGU_modell["till"],vname = outname)
execGRASS("r.to.vect",input=outname,output=outname,type="area")
execGRASS("v.out.ogr",input=outname,output=paste(outname,".shp",sep=""))
getwd()
source('~/PROJECTP2/scripts_2017/tryingtopredictmoraine.R', echo=TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/Data/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
eval(parse(text = myfunctions))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
evaluateforwardCV_anyerror(mypath = paste("/home/fabs/PROJECTP2/temporlarge/RanFor_1on1_5foldgeomorph_localterrainp5/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 5,error = "cverror",geheim="geheimerprederror")
cl1="AD"
cl2="TG"
evaluateforwardCV_anyerror(mypath = paste("/home/fabs/PROJECTP2/temporlarge/RanFor_1on1_5foldgeomorph_localterrainp5/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 5,error = "cverror",geheim="geheimerprederror")
evaluateforwardCV_anyerror(mypath = paste("/home/fabs/PROJECTP2/temporlarge/RanFor_1on1_5foldgeomorph_localterrainp5/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 5,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
interestingparameters <- c("maxic_ws11_10m", "Convexity_50m","slope_DTM_50m_avg_ws11_50m")
interestingparameters %in% names(modeldataoktober)
df <- modeldataoktober[modeldataoktober$SGU_kartiert %in% c(cl1,cl2),]
boxplot(as.character(i) ~ SGU_kartiert,data=df)
i=interestingparameters[1]
boxplot(as.character(i) ~ SGU_kartiert,data=df)
boxplot(data=df,as.formula(as.character(i) ~ SGU_kartiert))
?boxplot
names(df)
df$SGU_kartiert <- droplevels(df$SGU_kartiert)
i
boxplot(data=df,maxic_ws11_10m ~ SGU_kartiert)
